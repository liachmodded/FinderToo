buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.tweaker-client'

version = "0.1"
group= "com.github.liachmodded"
archivesBaseName = "FinderToo"

defaultTasks 'setupDecompWorkspace', 'build'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {
    version = "1.8"
    runDir = "run"
	mappings = "snapshot_20150919"
    tweakClass = 'com.mumfrey.liteloader.launch.LiteLoaderTweaker'
}

configurations {
    provided
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    /*test {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        srcDir 'src/test/java'
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }*/
}

eclipse {
    classpath {
        plusConfigurations += [configurations.provided]
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

dependencies {
    provided fileTree(dir: 'libs', include: '*.jar')
}

task jarSrg(type: Jar) {
    from sourceSets.main.output
    classifier "srg"
}

artifacts.archives jarSrg

tasks.findAll { 'make' in it.name }*.enabled = false

tasks.withType(Javadoc) {
    // disable the crazy super-strict doclint tool in Java 8
    options.addStringOption('Xdoclint:none', '-quiet')
}

afterEvaluate {
	jar.manifest.attributes.remove 'TweakClass'
}

jar {
	extension 'litemod'
	from(configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}) {
		exclude 'META-INF/***'
	}
}

reobf {
	jar.task.dependsOn jarSrg
	jarSrg {
		useSrgSrg()
	}
}

processResources {
    def map = [
        version: project.version,
        mcversion: project.minecraft.version,
    ]
    
	def tokens = ['litemod.json', 'update.json']

    // this will ensure that this task is redone when the versions change.
    inputs.properties map
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include tokens
        // replace
        expand map
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude tokens
    }
}
